<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4CIGQOB+BkDgfgZA4H4GQOB6BkDgCAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGQOBUBkDgfgZA4H4GQOB+BkDgfgZA4H4GQOB+BkDgfgZA4H4GQOB+BkDgfgZA
        4HwGQOAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgYAZA4P8GQOD/BkDg/wZA4P8GQOAkAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4L4GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4DIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQOBgBkDg/wZA4P8GQOD/BkDg/wZA
        4CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgwgZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDgMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4GAGQOD/BkDg/wZA
        4P8GQOD/BkDgJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQODGBkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgYAZA
        4P8GQOD/BkDg/wZA4P8GQOAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4MgGQOD/BkDg/wZA
        4PwGQODuBkDg7AZA4OoGQODqBkDg6gZA4OwGQOD4BkDg/wZA4DIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGQOBgBkDg/wZA4P8GQOD/BkDg/wZA4CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgygZA
        4P8GQOD/BkDgxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4G4GQOD/BkDgMAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAZA4GAGQOD/BkDg/wZA4P8GQOD/BkDgJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGQODKBkDg/wZA4P8GQODAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgagZA4P8GQOAwAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABkDgYAZA4P8GQOD/BkDg/wZA4P8GQOAkAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAZA4MwGQOD/BkDg/wZA4L4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQOBoBkDg/wZA
        4DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQOBgBkDg/wZA4P8GQOD/BkDg/wZA4CQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABkDgzgZA4P8GQOD/BkDgvgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA
        4GgGQOD/BkDgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4GAGQOD/BkDg/wZA4P8GQOD/BkDgJAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQODQBkDg/wZA4P8GQODAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABkDgagZA4P8GQOAuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgYAZA4P8GQOD/BkDg/wZA
        4P8GQOAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4NAGQOD/BkDg/wZA4MQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGQOBsBkDg/wZA4C4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQOBgBkDg/wZA
        4P8GQOD/BkDg/wZA4MgGQODABkDgwgZA4MIGQODEBkDgxAZA4MYGQODIBkDg9AZA4P8GQOD/BkDg9AZA
        4MYGQODCBkDgwgZA4MAGQODABkDgwgZA4OAGQOD/BkDgLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA
        4GAGQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOAuAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABkDgYAZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4CwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGQOBgBkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDgLAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4GAGQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgWgZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4CoAAAAAAAAAAAAAAAAGQOA2BkDgcgZA4BYGQOACBkDgegZA4PoGQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4PYGQOB2BkDgAgZA4B4GQOBwBkDgGgZA4NwGQOD/BkDg8AZA4HIGQOAEBkDgNAZA
        4NIGQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQODEBkDgKgZA4AwGQOCEBkDg9gZA4P8GQODWBkDgyAZA4P8GQOD/BkDg/wZA
        4NIGQOBABkDgBgZA4H4GQOD2BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQODwBkDgbAZA4AIGQOBSBkDg4AZA4P8GQOD/BkDg/wZA4LwGQOAeBkDgygZA
        4P8GQOD/BkDg/wZA4PwGQOCiBkDgGAZA4CgGQOC+BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDgqgZA4BwGQOAiBkDgtAZA4P8GQOD/BkDg/wZA4P8GQOC8BkDgFAAA
        AAAGQOAEBkDgcAZA4O4GQOD/BkDg/wZA4P8GQODuBkDgaAZA4AQGQOBcBkDg5gZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg3AZA4EoGQOAGBkDgeAZA4PQGQOD/BkDg/wZA4P8GQODiBkDgYgZA
        4AIAAAAAAAAAAAAAAAAAAAAABkDgFgZA4KIGQOD/BkDg/wZA4P8GQOD/BkDgyAZA4DIGQOAQBkDgkgZA
        4PoGQOD/BkDg/wZA4P8GQOD/BkDg+AZA4IQGQOAKBkDgOgZA4NIGQOD/BkDg/wZA4P8GQOD/BkDg/AZA
        4AoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4EYGQODeBkDg/wZA4P8GQOD/BkDg+gZA
        4I4GQOAMBkDgMAZA4MIGQOD/BkDg/wZA4LwGQOAoBkDgEAZA4JYGQOD8BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD8BkDgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4AwGQOCOBkDg+gZA
        4P8GQOD/BkDg/wZA4OAGQOBOBkDgAAZA4FwGQOBYBkDgAAZA4FQGQODkBkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4PwGQOACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGQOA0BkDgzAZA4P8GQOD/BkDg/wZA4P8GQOCuBkDgHAZA4B4GQOCwBkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/AZA4AIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGQOAEBkDgcgZA4PIGQOD/BkDg/wZA4P8GQODwBkDg8gZA4P8GQOD/BkDg/wZA
        4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD8BkDgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDgHgZA4KwGQOD/BkDg/wZA4P8GQOD/BkDg/wZA
        4P8GQOCmBkDg6AZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/wZA4PwGQOACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA4EgGQODWBkDg/wZA
        4P8GQODaBkDgQgAAAAAGQODYBkDg/wZA4P8GQOD/BkDg/wZA4P8GQOD/BkDg/AZA4AIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA
        4AQGQOBaBkDgbgZA4AgAAAAAAAAAAAZA4DIGQOBMBkDgTAZA4EwGQOBMBkDgTAZA4EwGQOA+AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////w/wAP8P8AD/D/AA/w/wAP8P8P7/D/D+/w/w/v8P8P7/D/
        D+/w/w/v8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+AAAHxwAADAHAADggYABgeDgBwfwMAwP/AwwD/4H
        4A//gYAP/+AAD//wAA///DAP//////////8=
</value>
  </data>
</root>